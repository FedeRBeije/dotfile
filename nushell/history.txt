cd
clear
cd nushell
$env.EDITOR
vim .zshrc
config nu
clear
cd
which nu
nvim config.nu
$nu.config-path
$nu.env-path
clear
cd
nvim config.nu
nvim env.nu
source env.nu
source config.nu
cd
nvim
source env.nu
source config.nu
cd
:q
$nu.env-path
cd nushell
cd
nvim .zshrc
cd nushell
cd
tmux
tmux ls
cd
nvim .zshrc
cd .config
nvim
clear
nvim
cd skhd
source skhdrc
nvim
source skhdrc
brew services restart skhd<\n>
nvim
brew services restart skhd<\n>
nvim
clear
cd client
clear
cd packages/cli
clear
cd config
clear
nvim
clear
cjkdaf
mouse
clear
cd
sh <(curl -L https://nixos.org/nix/install)
cd .zshrc
clear
cd .config/nix
clear
cd
nvim .zshrc
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
nvim .config/nix
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
nvim .config/nix
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
tmux
clear
cd .config/nix
nvim
cd ..
nvim
clear
cd nvim/lua/fede
nvim
clear
nvim
clera
clear
nvim
clear
nvim
s
ls
cd retail
ls
cd packages
ls
cd clint
clear
nvim
cd retail
nvim
clear
cd clint
nvim
git checkout -b clint/rust
gitc
git checkout develop
git checkout clint/rust
nvim
git checkout develop
cd retail
nvim
clear
nvim
cd
cd .config/nushell
nvim
cd nvim
cd clienteling
npm run dev
clint project
npm run dev
npm run update
clear
cd retail
clear
:qa
clear
nvim
cd .config
nvim tmux
ls
cd tmux
ls
source ~/.config/tmux/tmux.conf
nvim
clear
tmux detach
tmux attach -t work
clear
source ~/.config/tmux/tmux.conf
clear
clera
clear
cd
clear
cd nushell
clear
cd nvim/lua/fede
nvim
clear
nvim
source ~/.config/nushell/config.nu<\n>
gitd
nvim
source ~/.config/nushell/config.nu
gitd
gitc
nvim
source ~/.config/nushell/config.nu
clear
source ~/.config/nushell/config.nu
clear
source ~/.config/nushell/config.nu
gitc
clear
git branches
git --help
git branch --help
git branch --list
cd retail
git branch --list
lines
git branch | lines
gitc
git branch | lines | fzf --multi
git branch | lines | fzf --multi | first
git branch | lines | fzf --multi | second
clear
git branch | lines | fzf --multi 
git branch | lines
clear
git branch
git branch | lines
clear
git branch | lines | fzf
clear
git branch
git branch --list
clear
git branch | lines | fzf --multi 
git branch | fzf
git branch | lines | fzf
source ~/.config/nushell/config.nu
gitc
git checkout clint/rust
cd develop
git checkout develop
clear
clera
clear
git branch | lines
git branch
clear
git branch | fzf
git branch | ls
clear
gitc
source ~/.config/nushell/config.nu
clear
source ~/.config/nushell/config.nu
clear
git branch | fzf | describe
clear
git branch | fzf | describe
git branch | fzf 
gitc
git branch | fzf | into string | str trim
source ~/.config/nushell/config.nu
gitc
fs
source ~/.config/nushell/config.nu
gitc
clear
gf
clear
git fetch
clear
nvim
clear
nvim
cd client
cd src/assets
ls
cd  images
ls
npm run dev
clear
git fetch
clear
git fetch
gd
gf
gitc
clear
npm run dev
npm run update
clear
npm run update
clear
nvim
clear
cd retail
gitc
clear
gitc
clear
nvim
clear
clear
cd retail
clear
cd clint
cd clint
mkdir src/commands/
touch src/command/mod.rs
clear
cargo install clap
clear
nvim
cargo run -- login --global
cargo run -- login 
clear
cd packages/cli
cargo run -- logout
cargo install ini
cargo add ini
cargo run -- logout
clear
git add .
git commit -m "rust"
gitc
clear
nvim
clear
nvim .zshrc
clear
cd fede
nvim
nix search ripgrep
nix-shell search ripgrep
clear
nix search nixpkgs ripgrep
cd nix
nvim
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
nvim
nvim
clear
clear
cd .config
nvim
nix search nixpkgs sketchybar
cd nix
nvim config.nu
nvim flaker.nix
nvim
clerar
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
nvim
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
nvim flaker.nix
nvim
cd nix
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
rm -rf ~/Library/Fonts/HackNerdFont-Bold.ttf
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
cd ~/Library/Fonts/
ls
rm -rf | first 9
ls | where # <= 10
ls
ls | get 2
ls | $in
ls | $#
ls | where name =~ Hack
ls | where name =~ Hack | each { rm $in.name } | null
ls
ls | where name =~ Hack | each { rm -rf $in.name } | null
ls
ls | where name =~ Hack and type == file | each { rm -rf $in.name } | null
ls
ls | where name =~ Hack and type == file | each { rm $in.name } | null
ls
ls | where name == HackNerdFont-BoldItalic.ttf and type == file | each { rm $in.name } | null
ls
finder
find
clear
ls | where name == HackNerdFont-BoldItalic.ttf and type == file | each { rm $in.name } | null
ls
rm -rf HackNerdFont-BoldItalic.ttf
ls
rm -rf HackNerdFont-Italic.ttf
rm -rf HackNerdFont-Regular.ttf
ls
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
ls
rm -rf HackNerdFontMono-Regular.ttf
rm -rf HackNerdFontMono-Bold.ttf
rm -rf HackNerdFontMono-BoldItalic.ttf
rm -rf HackNerdFontMono-Italic.ttf
ls
rm -rf HackNerdFontPropo-Italic.ttf
rm -rf HackNerdFontPropo-Bold.ttf
rm -rf HackNerdFontPropo-BoldItalic.ttf
rm -rf HackNerdFontPropo-Regular.ttf
ls
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
cd
cd nu
nvim
clear
cd
nvim .zshrc
source ~/.zshrc
clear
sketchybar
clear
brew services start sketchybar
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
nvim flake.nix
cd nvim
nvim
clear
nvim
clear
cd .config
nvim
clear
nvim
clear
cd client
clear
cd client
cd retail
clear
git checkout -b mc/feature/expo
clear
clear
npm i -g eas-cli
npx expo-doctor@latest
npx expo install --check
npx expo install expo@^52.0.0 --fix
clear
nvim
git push
fuck
thefuck
git push -u origin mc/feature/expo
npm run dev
clear
npm run dev
clear
git checkout -b MC/feature/expo
git checkout -b MC/feature/expo_52
gitc
git branch -d MC/feature/expo_52
clear
git checkout -b MC/feature/expo_52
nvim
clear
nvim
gitc
clear
clear
cd packages/cli
cd packages/cli
clear
npm install csv-parser --workspace=packages/cli
clear
nvim
clear
npm run buiold
npm run build
clear
npm run build
clint make-issues --path=~/Desktop/to-do-rp-csv
clint project
nvim
clear
npm run build
clint make-issues --path=~/Desktop/to-do-rp-csv
clint -h
clint help make-issues
clint make-issues -p ~/Desktop/to-do-rp-csv
clint make-issues --path ~/Desktop/to-do-rp-csv
npm run build
clint make-issues --path ~/Desktop/to-do-rp-csv
clint make-issues --path ~/Desktop/todo.csv
clear
curl -H "Authorization: Bearer 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" \<\n>     https://api.github.com/repos/organization_name/repository_name/issues<\n>
curl -H "Authorization: Bearer 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" \<\n>     https://api.github.com/repos/EngineeringRetailPlatform/retail-platform-mono/issues<\n>
curl -H "Authorization: Bearer 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" \<\n>     https://api.github.com/EngineeringRetailPlatform/retail-platform-mono/issues<\n>
npm run build
clint make-issues --path ~/Desktop/todo.csv
npm run build
clint make-issues --path ~/Desktop/todo.csv
npm run build
clint make-issues --path ~/Desktop/todo.csv
npm run build
clint make-issues --path ~/Desktop/todo.csv
clear
clint make-issues --path ~/Desktop/todo.csv
clint make-issues --path ~/Desktop/todos.csv
cd
cd ~/Desktop
ls
ls | where name =~ todo
cd packages/cli
clint make-issues --path ~/Desktop/todo.csv
npm run build
npm run dev
clint make-issues --path ~/Desktop/todo.csv
npm run bl
npm run build
clint make-issues --path ~/Desktop/todo.csv
gh 
nix search nixpkgs gh
cd nix
nvim flake.nix
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
gh -v
clear
npm run build
clint make-issues --path ~/Desktop/todo.csv
gh auth status
gh issue list --repo <owner>/<repo-name><\n>
gh issue list --repo EngineeringRetailPlatform/retail-platform-mono
gh issue create --title "Test Issue" --body "This is a test issue body" --repo "EngineeringRetailPlatform/retail-platform-mono"<\n>
cd
cd retail
open ~/Desktop/todo.csv
cd ~/Desktop/todo.csv
cd
cd ~/Desktop/todo.csv
cd Desktop
open todo.csv | to json > todo.json<\n>
clear
clint make-issues --path ~/Desktop/todo.csv
npm run build
clint make-issues --path ~/Desktop/todo.csv
clear
cd retail
cd ..
ls
git clone git@github.com:EngineeringRetailPlatform/ebsn-front-services.git
rm -rf ebsh-front-services
git clone git@github.com:EngineeringRetailPlatform/ebsn-front-services.git
rm -rf ebsh-front-services
ls
rm -rf ebsn-front-services
ls
rm -rf ebsh-front-services
git clone git@github.com:EngineeringRetailPlatform/ebsn-front-services.git
cd ebsn-front-services
cd ebsn-front
clear
npm i
npm run test
clear
npx jest ./src/backofficeService/backofficeService.spec.ts
cd ebsn-front
ls
cd src
ls
npx jest ./src/services/backofficeService/backofficeService.spec.ts
clear
npx jest ./src/services/backofficeService/backofficeService.spec.ts
nvim
npx jest ./src/services/backofficeService/backofficeService.spec.ts
open todo.csv
open todo.csv | from csv --separator ';'
open todo.csv 
clear
npm run build
clint make-issues --path ~/Desktop/todo.csv
clear
cd tmux
nvim
clear
nvim
clear
clear
npx jest ./src/services/backofficeService/backofficeService.spec.ts
npx jest ./src/services/backofficeService/backofficeService.spec.ts
clint make-issues --path ~/Desktop/todo.csv
clear
clint make-issues --path ~/Desktop/todo.csv
open todo.csv 
clear
open todo.csv 
clear
nvim
gitc
clear
cd presenter
npx expo install expo@^52.0.0 --fix
npx expo doctor
npx expo-doctor
npx expo install --check
cd client
npx expo-doctor
npx expo install --check
clear
turbo clean
cd retail
turbo clean
npx @turbo/codemod@latest update
clear
npx expo-doctor
npx expo-doctor
npm i
clear
nvim
nvim
npm i
nvim
npx expo-doctor
npx expo-doctor
nvim
clear
npx expo install --check
clear
clear
nvim
clear
cd packages/cli
nvim
clear
cd rust
ls
cd example
clear
cargo run
c
cargo run
cargo run 
cargo run ciao
cargo run
cargo run write
cd .config
nvim
cd fede
nvim
clear
nvim
clear
cd desktop
clear
open todo.csv
open todo.numbers
open todo.csv
open --raw todo.csv
open --raw todo.csv | from csv
open --raw todo.csv 
<\n>   · ──┬─<\n>   ·   ╰── CSV error: rec
clear
open --raw todo.csv 
open --raw todo.csv | from csv --separator ';'
gh copilot explain "how can i use nushell to run for each row from a csv readed with nushell to create an issue where 3 columns should be use for the message of the issue and writed in md"
gh copilot explain "how can i use nushell to run for each row from a csv readed with nushell to create an issue where 3 columns should be use for the message of the issue and writed in md. the command should be this: gh issue create --title "Test Issue" --body "This is a test issue body" --repo "EngineeringRetailPlatform/retail-platform-mono""
gh copilot explain "how can i use nushell to run for each row from a csv readed with nushell to create an issue where 3 columns should be use for the message of the issue and writed in md. the command should be this: gh issue create --title "Test Issue" --body "This is a test issue body" --repo "EngineeringRetailPlatform/retail-platform-mono" the body it should be a md like follow ### Epic \n $it.epic \n ### As \n User \n ### I want to \n $it.IwantTo \n ### So that \n $in.SoThat "
open --raw todo.csv | from csv --separator ';' | each { println!($it)}
open --raw todo.csv | from csv --separator ';' | each { |row| println!($row)}
open --raw todo.csv | from csv --separator ';' | each { |row| }
gh copilot explain "how can i use nushell to run for each row from a csv readed with nushell to create an issue where 3 columns should be use for the message of the issue and writed in md. the command should be this: gh issue create --title "Test Issue" --body "This is a test issue body" --repo "EngineeringRetailPlatform/retail-platform-mono" the body it should be a md like follow ### Epic \n $it.epic \n ### As \n User \n ### I want to \n $it.IwantTo \n ### So that \n $in.SoThat "
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"### Epic \n ($row.Epic) \n ### As \n User \n ### I want to \n ($row.IwantTo) \n ### So that \n ($row.SoThat)" --repo "EngineeringRetailPlatform/retail-platform-mono"}
gh project view <project_id> --json columns --repo EngineeringRetailPlatform/retail-platform-mono
gh project view Product Board --json columns --repo EngineeringRetailPlatform/retail-platform-mono
gh project view 
gh auth refresh -s read:project
gh project view 
gh project -h
gh project list --owner EngineeringRetailPlatform
gh project view PVT_kwDOCoNLR84AsTvm --json columns --repo EngineeringRetailPlatform/retail-platform-mono
gh project view PVT_kwDOCoNLR84AsTvm 
gh project view PVT_kwDOCoNLR84AsTvm --json columns --owner EngineeringRetailPlatform
gh project view PVT_kwDOCoNLR84AsTvm  --owner EngineeringRetailPlatform
gh project view 1  --owner EngineeringRetailPlatform
gh project view 5  --owner EngineeringRetailPlatform
gh issue status
gh issue status --owner EngineeringRetailPlatform
cd retail
gh issue status
gh issue status --json projectCard
gh issue status --json projectCards
gh issue status --json projectItems
gh issue list --json number,title --jq '.[] | {number, title}'<\n>
gh project cards list --project-id <a93fb6e7> --json content_url<\n>
gh project field-list
clear
nvim
cd nix
nvim
cd nushell
nvim
clear
clear
nvim
vim
source ~/.config/nushell/config.nu
q
source ~/.config/nushell/env.nu
q
clear
source ~/.config/nushell/config.nu
clear
vim 
gh issue
which nu
clear
c;ear
clear
cd client
nvim
clear
nvim
npx jest ./src/services/backofficeService/backofficeService.spec.ts
npm i
nvim
clear
gitc
npm run dev
clear
npm run dev
clear
clear
cd retail
cd desktop
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | null) \n # So that \n ($row.SoThat | null)" --label $"user story, Epic ($row.Epic)" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono"} | null<\n>
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | null) \n # So that \n ($row.SoThat | null)" --label $"user story, Epic ($row.Epic)" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono"}
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | null) \n # So that \n ($row.SoThat | null)" --label $"user story, Epic ($row.Epic)" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-monoa" }
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | null) \n # So that \n ($row.SoThat | null)" --label $"user story, Epic ($row.Epic)" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono" }
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | 'insert') \n # So that \n ($row.SoThat |'insert')" --label $"user story, Epic ($row.Epic)" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono" }
open --raw todo.csv | from csv --separator ';' | each { |row| }
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | 'insert') \n # So that \n ($row.SoThat |'insert')"--label $"Epic ($row.Epic)" --label "user story" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono" }
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | 'insert') \n # So that \n ($row.SoThat |'insert')"--label $"'Epic ($row.Epic)'" --label "user story" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono" }
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | 'insert') \n # So that \n ($row.SoThat |'insert')" --label $"Epic ($row.Epic)" --label "user story" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono" }
clear
open --raw todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | 'insert') \n # So that \n ($row.SoThat |'insert')" --label $"Epic ($row.Epic)" --label "user story" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono" }
cd retail
open --raw ~/Desktop/todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | 'insert') \n # So that \n ($row.SoThat |'insert')" --label $"Epic ($row.Epic)" --label "user story" --project "Product Board" --repo "EngineeringRetailPlatform/retail-platform-mono" }
open --raw ~/Desktop/todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic | null) \n # As \n User \n # I want to \n ($row.IwantTo | 'insert') \n # So that \n ($row.SoThat |'insert')" --label $"Epic ($row.Epic)" --label "user story" --repo "EngineeringRetailPlatform/retail-platform-mono" }
clear
cd retail
clear
nvim
clear
git fetch
gf
clear
nvim
git fetch
git checkout MyClientelingMock
clear
npm run dev
clear
open --raw ~/Desktop/todo.csv | from csv --separator ';' | each { |row| gh issue create --title $row.Title --body $"# Epic \n ($row.Epic) \n # As \n User \n # I want to \n ($row.IwantTo) \n # So that \n ($row.SoThat)" --label $"Epic ($row.Epic)" --label "user story" --repo "EngineeringRetailPlatform/retail-platform-mono" }
clear
nvim
clear
cd nix
nvim
dal
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
cd nushell
nvim
source ~/.config/nushell/config.nu
nvim
vim
v
vim
clear
nvim
clear
cd cognito
cd packages/cognito
nvim
clear
nvim
cd ..
nvim
cd cognito
npm publish
nvim
npm publish
cd services
nvim
cd retail
cd packages/services
nvim
clear
cd cognito
npm publish
cd queue
cd ..
ls
rm -rf monclient-app-queue-services
git clone git@github.com:EngineeringRetailPlatform-Moncler/monclient-app-mulesoft-queue-manager.git
git checkout develop
cd queue
cd monclient-app-mulesoft-queue-manager
git checkout develop
clear
git fetch
npm i
npm run dev
nvim
npm run dev
npm i
npm run dev
nvim
npm install --save @babel/runtime
clear
npm run dev
clear
npm install --save @babel/runtime
npm run dev
nvim
clear
nvim
cd nix
nvim
nvi
vim
npm i
npm run dev
clear
nvim
vim
npm i
npm run dev
clear
nvim
cd retail
clear
nvim
cd lua
cd nvim
nvim
clear
nvim
clear
nvim
nvim
npm run dev
clear
nvim
gg
gf
git pull
clear
nvim
cd .config
nvim
git fetch
git pull
nvim
vi
vim
npm run dev
clear
nvim
clear
nvim
cd client
npx lint-staged
cd retail
gf
git pull
nvim
git pull
nvim
gf
git pull
clear
git whoami
git config list
clear
cd retail
clear
nvim
gf
git pull
gitc
clear
npm i
clear
nvim
npm run dev
clear
cd retail
clear
turbo clean
npx @turbo/codemod@latest update
nvim
npx @turbo/codemod@latest update
clear
nvim
vnim
nvim
clear
nvim
npm run build
npm i
npx expo-doctor
npx expo install --check
npm run build
cd packages/cli
npm run build
clear
npx lint-staged
gh copilot explain "<\n>/Users/federicoreghini/Documents/beije/engineering/retail-platform-mono/apps/native/my-clienteling/src/constants/Colors.ts<\n>  1:1  error  Definition for rule '@typescript-eslint/no-empty-object-type' was not found     @typescript-eslint/no-empty-object-type<\n>  1:1  error  Definition for rule '@typescript-eslint/no-wrapper-object-types' was not found  @typescript-eslint/no-wrapper-object-types<\n>"
nvim
clear
clera
clear
gitc
nvim
npm run dev
npm i
clear
clear
npm rund ev
vim
nvim
clear
nvim
cd ebsn-front
cd example
cd ebsn-front
clear
git fetch
git pull
git pull master
git pull origin master
nvim
gitc
clear
gitc
gitd
nvim
cd nushell
nvim
clear
clerar
clear
clear
git pull
clear
source ~/.config/nushell/config.nu
gitd
git checkout MyClientelingMock
clear
npm run build
npm publish
nvim
cd nvim
npm run dev
nvim
npm i
cd lib
cd ..
npm run build
cd lib
npm publish
clear
clear
ear
clear
cd ..
clear
nvim
npm run build
cd lib
npm publish
clear
cd ..
npm i
gf
clear
gh copilot explain "how to map all keypmas of tmux"
nvim
cd tmux
nvim
tmux attach
tmux kill-session -t work
tmux ls
cd client
cd retail
clear
tmux attach -t work
gh copilot explain "create new session with name"
gh copilot explain "create new session within tmux with name"
clear
cd client
clear
cd client
clear
tmux new-session -s work
tmux kill-session -t work
source ~/.config/tmux/tmux.conf
gh copilot explain "how to re source tmux config within tmux"
:source-file ~/.config/tmux/tmux.conf
:source ~/.config/tmux/tmux.conf
source ~/.config/tmux/tmux.conf
clear
gh copilot explain "how to change index of a window in tmux"
clear
cd clien
clear
clear
nvim
gf
nvim
clear
cd nvim
npm run dev
nvim
clear
clear
gf
clear
gid
gitd
clear
npm run dev
clear
clera
clear
vim ebsn
cd ebsn-front
vim
cd ebsn-front
clear
gf
clear
npm run test:assisted-sales
npm i
nvim
clear
git fetch
clear
nvim
clear
git pull origin MC/feature/newcontact
npm run test:assisted-sales
clera
clear
npm run dev
clear
nvim
gf
npm run dev
clear
vim
cd .config
nvim
nvim
clear
nvim
vim
nvim
nvim
cd
vim .zshrc
clear
nvim .config
clear
nvim
cd .config
nvim
source ~/.config/tmux/tmux.conf
tmux attach -t work
tmux detach
source ~/.config/tmux/tmux.conf
tmux source-file ~/.config/tmux/tmux.conf<\n>
clear
nvim
clear
cd client
clear
nvim
nvim
cd
clear
ls
la
clear
ls -l
nvim .tmux.conf
clear
ls
clear
tmux detach
tmux attach -t work
tmux ls
tmux source-file ~/.config/tmux/tmux.conf
cd .config
nvim
tmux list-keys | grep C-q<\n>
nvim
tmux source-file ~/.config/tmux/tmux.conf
nvim
tmux source-file ~/.config/tmux/tmux.conf
tmux list-keys | grep C-q<\n>
find ~ /etc -name "tmux.conf"<\n>
clear
tmux attach -t work
tmux detach
tmux list-keys | grep C-q<\n>
tmux list-keys | grep C-q
tmux source-file ~/.config/tmux/tmux.conf
tmux list-keys | grep C-q
tmux list-keys | grep C-s
nvim
cd .config
nvim
tmux source-file ~/.config/tmux/tmux.conf
nvim
tmux list-keys | grep C-o
tmux list-keys | grep C-t
nvim
tmux source-file ~/.config/tmux/tmux.conf
tmux list-keys | grep C-t
tmux list-keys | grep C-q
tmux list-keys | grep C-
nvim
clear
nvim
tmux source-file ~/.config/tmux/tmux.conf
tmux list-keys | grep C-q
tmux list-keys | grep C-s
clear
nvim
nvim
cd packages/utils
npm init -y
npx tsc --init<\n>
cd packages/utils
clear
mkdir src
touch src/validation/email.ts
mkdir src/validation
touch src/validation/email.ts
clear
cd reatil
npm install --save-dev jest ts-jest @types/jest --workspace=packages/utils<\n>
npm install --save-dev jest ts-jest @types/jest --workspace=utils
nvim
cd ..
nvim
cd retial
cd retail
turbo gen workspace --type package --name utils
cd packages/utils
nvim
cd ..
cd ..
clear
cd utils
cd retail
npm install --save-dev jest ts-jest @types/jest --workspace=utils
npm install --save-dev typescript --workspace=utils
cd packages/utils
npm run build && npm run test
npm run build and npm run test
npm run build
npm run test
npm run build
npm run test
npm run build
npm run test
npm run build
npm run test
npm run build
npm run test
npm run build
npm run test
clear
npm run test
clear
npm run build
npm run test
npm run build
npm run test
npm run build
clear
npm run build
clear
npm run build
clear
npm run build
node cjs-test.js
node esm-test.mjs
npm run build
node cjs-test.js
node esm-test.mjs
npm run build
node esm-test.js
npm run build
cd retail
npm i
cd client
npm run dev
cd retail
npm i
c;ear
clear
cd ..
npx create vite utils --template vanilla-ts
npm create vite utils --template vanilla-ts
npm run build
cd utils
npm run build
clear
turbo gen workspace --type package --name @clienteling/utils --copy packages/services
clear
q
:q
cd packages
clear
turbo gen workspace --type package --name @clienteling/utils --copy @eng-retail-platform/front-services
cd retail
npm i
npm run dev
cd packages/utils
npm run build
npm run test
npm run build
clear
npm run build
clear
npm run test
npx ts-jest config:init
npm run test
clear
npm i
npm run dev
cd client
nvim
npm run build
clear
npm run build
clear
npm run dev
npm i
cd retail
npm i
clear
npm run build
turbo gen workspace --type package --name @clienteling/utils --copy @clienteling/twilio
cd packages
turbo gen workspace --type package --name @clienteling/utils --copy @clienteling/twilio
cd retail
npm i
cd utils
nvim
npm run test
nvim
npm run build
clear
npm run build
clear
cd retail
nvim
tubo clean
turbo clean
nvim
npm i
cd packages/utils
npm run build
npm run test
clear
npm run test
npm run build
npm run test
npm run build
npm run test
npm run build
npm run test
npm run build
cleawr
clear
npm run build
clear
npm run build
clear
npm i
clear
turbo dev --filter=my-clienteling
npx @turbo/codemod@latest update
turbo dev --filter=my-clienteling
nvim
turbo dev --filter=my-clienteling
clear
nvim
nvim
clear
cd client
npm run dev
turbo dev --filter=my-clienteling
npm i --save-del @babel/highlight --workspace=my-clienteling
turbo dev --filter=my-clienteling
clear
nvim
clear
gf
turbo clean
npx @turbo/codemod@latest update
nvim
clear
npm i
cd client
npm run dev
clear
cd retail
nvim
npm i --save-dev  typescript@latest
clear
nvim
clear
turbo dev --filter=my-clienteling
nvim
turbo dev --filter=my-clienteling
clear
nvim
clear
cd retail
clear
turbo gen workspace --type package --name @clienteling/utils 
clear
cd packages/utils
clear
npm init jest@latest
cd retail
npm i --save-dev  jest@latest
npm i --save-dev  jest@latest --workspace=@clienteling/utils
nvim
npm i --save-dev  jest@latest --workspace=utils
npm i --save-dev --workspace=@clienteling/utils jest@latest
cd packages/utils
npm run teset
npm run test
npm install --save-dev --workspace=@clienteling/utils  ts-jest
npm install --save-dev --workspace=@clienteling/utils  @types/jest
npm run test
npm run build
npm run test
npm i
clear
npm i
npm run test
clear
npm i
npm run test
npm run build
npm i
cd client
npm run dev
cd retail
npm i
clear
gf
cd retail
cd reatil
cd retail
gf
nvim
clear
clear
clear
nvim
cler
clear
cd client
clear
git checkout -b feature/247-refactor
clera
clear
nvi
nvim
clear
npm run dev
clear
gf
git fetch
vim
clear
git push
clear
gitc
gf
git pull
gitd
clear
nvim
clear
cd packages
nvim
clear
cd reatil
cd retail
nvim
vim
cd retail
cd client
nvim
clear
clea
clear
clear
cd packages
npm run build
cd packages
cd utila
cd utils
npm run build
cd reatil
cd retail
npm i
clear
npm run build
cd utils
npm run build
cd twilio
cd ../twilio
clear
npm run build
cd retail
npm i
cd utils
npm i
npm run build
cd reatil
cd retail
npm i
nvim
cd my-presenter
cd utils
npm run build
clear
npm run build
clera
clear
npm run build
npm run tst
npm run test
cd retail
npm i
nvim
cd client
nvim
gf
clear
cd retail
clear
cd apps
ls
cd web
ls
npx create vite pkgs-test
npm create vite pkgs-test
cd pkgs-test
npm i
cd pkgs-test
npm run dev
gf
clear
nvim
clear
cd retail
turbo dev --filter=pkgs-test
clear
nvim
npm i
cd utils
nvim
npm run build
cd retail
nvim
cd pkgs-test
cd utils
npm run build
cd utils
nvim
npm run build
nvim
npm run build
nvim
npm run build
nvim
npm run build
clear
cd utils
npm run build
npm run dev
cd retail
gf
clear
clear
nvim
cd retail
clera
clear
nvim
npm run dev
npm i
gd
gf
clear
git pull
clear
npm run build
clear
cd lib
clear
cd ..
npm run build
cd lib
npm publish
clear
npm run dev 
claer
clear
npm i
npm run dev 
clera
clear
nvim
cd nushell
nvim
npm run dev 
ls -a
ls -l
la
clear
cd client
gf
clear
git pull
clear
nvim
git clone https://github.com/EngineeringRetailPlatform/retail-platform-mono.wiki.git
https://github.com/EngineeringRetailPlatform/retail-platform-mono.wiki.git
git clone github.com:EngineeringRetailPlatform/retail-platform-mono.wiki.git
clear
nvim
cd ..
git clone github.com:EngineeringRetailPlatform/retail-platform-mono.wiki.git wiki
nvim
cd wiki
nvim
clear
cd wiki
clear
clera
clear
cd retail
clear
cd utils
npm run dev 
gf
clear
nvim
npx lint-staged
tmux attach -t work
clear
clear
clear
nvim
nvime
nix search nixpkgs mozilla
vim nix
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
vim nix
cd aerospace
osascript -e 'id of app "Firefox"'
nvim
osascript -e 'id of app "Postman"'
npm run build
cd lib
npm publish
clear
npm i
cd ..
npm run build
cd lib
npm publish
cd packages/utils
npm run build
cd utils
npm run test
npm run build
cd queue
clear
cd queue
clear
npm run test
clear
npm run test
nvim
clear
cd services
nvim
cd packages/services
clear
nvim
npm run dev
clear
gf
clear
npm run dev
npm run test
clear
gf
git pull
nvim
clear
gitc
git checkout pipeline/develop
git merge develop
git push
git checkout pipeline/test
git merge test
git merge develop
git push
git checkout pipeline/production
git merge develop
git push
clear
gitc
clear
cd queue
nvim
npm run dev
clera
clear
nvim
clear
cd retail
cd pkgs-test
npm run preview
clear
cd ..
nvim
clear
cd ..
cd retail
clear
cd retail
clear
npm run dev
clear
gf
git pull
nvim
clear
aerospace lsit-apps
aerospace list-apps
tmux attach -t work
clear
cd aerospace
aerospace list-apps
nvim
clear
cd .config
clear
clear
cd example
clear
clear
clear
ls
clea
clear
cd documents
ls
cd projects
ls
git clone git@github.com:federicoReghini/toto.git
mkdir toto
cd toto
git init
nvim
git config --global init.defaultBranch main
clear
cd ..
ls
ls
la
cd .git
cd toto
nvim
cd
la
vim .git
cd .git
nvim
cd
clera
clear
cd ~/.gitconfig
cd .gitconfig
git config --global --list<\n>
vim ~/.gitconfig
cd ~/.gitconfig
vim ~/.gitconfig
cd .ssh
nvim
git fetch
nvim
git fetch
clear
git branch -M main
clear
bun create qwik@latest
npm create qwik@latest
npm run qwik add tailwind
cd toto
npm run qwik add motion
npm install motion
npm run start
npm run preview
clear
cd ..
cd toto
nvim
clear
npm create qwik@latest
npm run qwik add motion
npm run qwik add tailwind
clear
npm install motion
nvm ls
clear
nvm
nvm ls
clear
nvim
nvim
cd ..
cd toto
clear
nvim
npm run preview
npm run dev
clear
npm run lint
npm run dev
clear
nvim
cd .config
nvim
clear
nvim
npm run dev
cd toto
clear
cd documents
cd downloads
cd ..
ls
cd downloads
ls
npm run dev
clear
clear
:qa
clear
nvim
clear
nix search nixpkgs syncthing
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
nvim
gf
npm run dev
npm install --save react-native-signature-canvas --workspace=my-clienteling
npm run build
npm install -g eas-cli
npm run build
clear
eas device:create
npm run build
clear
gitc
npx expo-doctor
npx expo install --check
nvim
npx expo install expo@latest
npx expo install --fix
npx expo-doctor@latest
npx expo install --check
npx expo install --fix
npx expo-doctor
npx expo install metro@^0.81.0 && metro-resolver@^0.81.0 && metro-config@^0.81.0
npx expo install metro@^0.81.0 
npx expo install metro-resolver@^0.81.0 
npx expo install metro-config@^0.81.0 
npx expo-doctor@latest
npx expo install metro@latest
npx expo-doctor@latest
nvim
npx expo-doctor@latest
npx expo install --fix
npx expo install --check
clear
npm run build
clear
npx lint-staged
nvim
ear
clear
turbo gen workspace --type app --name mc 
cd apps/native/mc
npx create-expo-app@latest
nvim
npx create-expo-app@latest
nvim
cd ..
cd retail
npm i
turbo clean
clear
nvim
npm i
clear
nvim
cd mc
npm run dev
cd packages/cli
npm run build
nvim
cd ..
ls
cd cli
nvim
npm run build
cd retail
npm i
clear
cd packages/cli
npm run build
cd mc
npm run dev
clint login
npm run dev
cd ..
nvim
cd mc
npm run dev
clear
nvim
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
nix search nixpkgs wezterm
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
y
cd .config/nix
nvim 
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
nvim
clear
nvim
npx expo-doctor@latest
npm why metro
nvim
clear
cd ..
cd mycli
nvim
cd clienteling
nix search nixpkgs vscode
clear
nvim
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
q
clear
cd .config/nix
nvim
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
vim nix
nvim
clear
nvim
clear
nvim
clear
npm run dev
clear
nvim
cd retail
gitc
nvim
clear
clear
npm i
clear
clear
npm run de
vim nix
nvim
gf
git pull
nvim
git pull
nvim
npm run build
cd lib
npm publish
cd ..
clear
npm i
nvim
npm run dev
git reset --soft HEAD~1
nvim
clear
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
which stow
clear
stow .
nvim
cd
la
cat .zshrc ~/.config/.zshrc
clear
cd .config
nvim
cd
vim .zshrc
cd .config
vim .zshrc
cd
nvim
cd .config
stow .
ls -a
rm .DS_Store
ls -a
stow .
clear
cd $HOME
cd $env.HOME
ls -lah .zshrc
clear
cd .config
vim nix
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
cd
vim
clear
cd .config
clera
clear
clear
clear
nvim
clear
cd ebsn
clear
nvim
npm i
clear
gf
vim
nvim
clear
nvim
gf
git pull origin develop
nvim
npm run test:light-report
npm i
npm run test:light-report
clear
nvim
git pull
nvim
clear
npm run dev
clear
npm run dev
npx expo-doctor
npx expo install --fix
clear
npm run dev
clear
npm i
nvim
npm run build
cd lib
npm run publish
npm publish
cd ..
clear
npm run test:light-report
c;ear
clear
npm run dev
cd
la
vim .zshrc
cd .config
npm run build
cd lib
npm publish
npm i
nvim
clear
clera
clear
cd ..
clear
nvim
clear
cd projects
ls
cd toto
clear
cd toto
clear
npm run dev
clear
nvim
clear
git push
nvi
nvim
git init
git add remote origin git@github.com:federicoReghini/toto.git
git remote add origin git@github.com:federicoReghini/toto.git
git add .
git commit -m "first commit"
git push -u origin main
git push -u origin main
clear
nvim
gf
gp
git pull
clear
git config --help
git config ls
git config
git config --help
git config list
git config pull.rebase --help
git config list
clear
nvim
npm run dev
clear
npm i react-native-signature-canvas --filter=my-clienteling
nvim
npm i
:qa
npm run build
cd toto
cd ..
mkdir hackethon
cd hackethon
touch pf.js
nvim
clear
cd hackethon
vim pf.js
node pf.js
node da2.js
node day2.js
npm run dev
clear
npm run dev
gf
nvim
clear
clear
git checkout package/core
git checkout -b package/core
cd core
cd packages/core
cd retail
cd packages/core
cd retail
cd packages/core
clear
clear
nvim
cd ..
cd retail
turbo gen workspace --type packages --name ui 
cd packages/ui
cd retail
cd packages/ui
npx create-expo-app --template expo-template-blank-typescript
npx -p @storybook/cli sb init --type react_native
npx degit chromaui/intro-storybook-react-native-template#main taskbox
npm i
npm run storybook:ios
npx expo-doctor
npx expo install --check
clear
npm i
clear
npm run storybook:ios
npm i
npm expo-doctor
npx expo-doctor
npx expo install --check
nvim
npm run storybook:ios
npm start -- --reset-cache
npm run storybook:ios
npm run start
npm run storybook:ios
nvim
clear
npm i
npm run storybook:ios
clear
cd toto
cd ..
npx degit chromaui/intro-storybook-react-native-template#main taskbox
cd taskbox
nvim
npm i
npm run storybook:ios
nvm ls
cd
curl -fsSL https://fnm.vercel.app/install | bash
cd 
la
la | where name === .fnm
la | where name == .fnm
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
nvim
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
clear
node
clear
nvm
which nvm
which node
clear
which fnm
clear
cd
la
la | where name == .fnm
^ls
^nvm
which fnm
fnm
fnm install node
fnm install 20.17.0
sudo find / -name ".fnm" 2>/dev/null<\n>
sudo find / -name ".fnm"<\n>
find ~ /etc -name ".fnm"
sudo find ~ /etc -name ".fnm"
^find ~ /etc -name ".fnm"
clear
find . -name ".fnm"
sudo find / | where $it =~ /\.fnm$/ | each { echo $it }<\n>
sudo find / | where $it =~ /\.fnm$/ 
ls ~ --recursive | where name =~ /\.fnm$/<\n>
cd .config
la
which fnm
find .fnm
la | where name == .fnm
cd 
la | where name == .fnm
clear
fnm --versom
fnm --version
fnm list-version
fnm list-remote
fnm install "v23.3.0"
fnm list
fnm use "v23.3.0"
source ~/.config/nushell/config.nu
split column --help
source ~/.config/nushell/config.nu
fnm use "v23.3.0"
node -V
node --version
fnm use default
node --version
darwin-rebuild switch --flake ~/.config/nix#mini<\n>
